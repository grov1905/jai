Documentación Completa del Modelo de Base de Datos (18 Tablas)
1. USUARIO
📌 Propósito:
Almacena toda la información de los usuarios registrados en el sistema, incluyendo datos de autenticación, perfil y actividad.

🔍 Estructura clave:

estado: Controla el acceso ("activo", "inactivo", "suspendido")

ultimo_acceso: Último login (para auditoría)

avatar_url: Imagen de perfil en la nube

🔗 Relaciones:

1:N → ARTICULO: "Un usuario escribe muchos artículos"
Ejemplo: María (usuario_id:5) ha creado 12 artículos

M:N → ROL: "Un usuario puede tener múltiples roles"
Ejemplo: Carlos es "Editor" y "Moderador" simultáneamente

1:N → COMENTARIO: "Un usuario realiza múltiples comentarios"
Ejemplo: Ana ha comentado en 8 artículos diferentes

🛠 Caso de uso práctico:
"Cuando Juan es promovido a Editor, se le asigna el rol correspondiente en USUARIO_ROL. Ahora puede editar artículos de otros usuarios."

2. ARTICULO
📌 Propósito:
Gestiona el contenido principal del sistema con control de versiones, estados de publicación y métricas de engagement.

🔍 Estructura clave:

slug: URL amigable (ej: "guia-sql-avanzado")

estado: Flujo de trabajo ("borrador", "revision", "publicado")

tiempo_lectura: Minutos estimados (calculado automáticamente)

🔗 Relaciones:

N:1 → USUARIO: "Cada artículo tiene un autor principal"
Ejemplo: El artículo ID:15 fue escrito por Laura (usuario_id:3)

M:N → CATEGORIA: "Un artículo puede estar en múltiples categorías"
Ejemplo: Un artículo sobre "Python para Data Science" aparece en "Programación" y "Ciencia de Datos"

1:N → VERSION_ARTICULO: "Historial completo de cambios"
Ejemplo: El artículo ID:22 tiene 5 versiones guardadas

🛠 Caso de uso práctico:
"Un artículo en estado 'borrador' pasa a 'revision' cuando el autor lo envía a edición. Luego, un editor lo aprueba cambiándolo a 'publicado'."

3. CATEGORIA
📌 Propósito:
Organiza jerárquicamente el contenido mediante un sistema de categorías y subcategorías.

🔍 Estructura clave:

parent_id: Permite árboles de categorías
Ejemplo: "Programación > Web > Frontend"

orden: Controla la posición en listados

color: Para identificación visual (#FF5733)

🔗 Relaciones:

Auto-relación: "Subcategorías"
Ejemplo: "Tecnología" es padre de "Inteligencia Artificial"

M:N → ARTICULO: "Categorización flexible"
Ejemplo: Un artículo puede estar en "Salud" y "Bienestar"

🛠 Caso de uso práctico:
"Al crear la categoría 'Sostenibilidad', se le asignan subcategorías 'Energías Renovables' y 'Reciclaje'. Los artículos pueden pertenecer a varios niveles."

4. ETIQUETA
📌 Propósito:
Sistema de etiquetado dinámico para clasificación transversal de contenido.

🔍 Estructura clave:

tipo: Contexto de la etiqueta ("tema", "ubicación", "persona")
Ejemplo: "Python" (tipo:tema), "Berlín" (tipo:ubicación)

slug: Para URLs de filtrado (/etiqueta/machine-learning)

🔗 Relaciones:

M:N → ARTICULO: "Artículos multi-etiquetados"
Ejemplo: Un artículo tiene las etiquetas "Blockchain", "Finanzas" y "Europa"

🛠 Caso de uso práctico:
"Los usuarios filtran artículos por la etiqueta 'Ciberseguridad', mostrando 45 resultados relacionados aunque estén en diferentes categorías."

5. USUARIO_ROL (Tabla intermedia)
📌 Propósito:
Gestiona la asignación de roles a usuarios con registro temporal.

🔍 Estructura clave:

fecha_asignacion: Auditoría de cambios
Ejemplo: "2024-03-15 14:30: Rol Admin asignado a Sara"

🔗 Relaciones:

FK → USUARIO + FK → ROL: Relación M:N completa
Ejemplo: (usuario_id:7, rol_id:3) = "Pedro tiene rol Moderador"

🛠 Caso de uso práctico:
"Cuando un usuario es promovido a Editor, se inserta un nuevo registro con fecha actual. Si se revoca el rol, se elimina este registro."

6. ROL
📌 Propósito:
Define los perfiles de acceso al sistema con distintos niveles de privilegios.

🔍 Estructura clave:

nivel_prioridad: Jerarquía (0=Admin, 1=Editor, 2=Usuario)

descripcion: Detalle de funciones
Ejemplo: "Puede publicar artículos pero no eliminarlos"

🔗 Relaciones:

M:N → PERMISO: "Permisos por rol"
Ejemplo: Rol "Editor" tiene permisos "editar_articulo" y "ocultar_comentarios"

🛠 Caso de uso práctico:
"El nuevo rol 'Colaborador' se crea con prioridad 5, permitiendo solo escribir borradores que requieren aprobación."

7. PERMISO
📌 Propósito:
Almacena acciones permitidas en el sistema para asignar a roles.

🔍 Estructura clave:

codigo: Identificador único ("crear_articulo")

nombre: Legible ("Crear nuevos artículos")

descripcion: Contexto de uso

🔗 Relaciones:

M:N → ROL: "Combinación flexible"
Ejemplo: El permiso "eliminar_usuario" solo está en rol "Admin"

🛠 Caso de uso práctico:
"Al agregar la funcionalidad de newsletter, se crea un nuevo permiso 'gestionar_suscripciones' asignado a roles 'Admin' y 'Marketing'."

8. ROL_PERMISO (Tabla intermedia)
📌 Propósito:
Establece qué permisos tiene cada rol en el sistema.

🔍 Estructura clave:

PK compuesta: (rol_id, permiso_id)

Sin campos adicionales (relación pura)

🔗 Relaciones:

FK → ROL + FK → PERMISO
Ejemplo: (rol_id:2, permiso_id:5) = "Rol Editor puede aprobar comentarios"

🛠 Caso de uso práctico:
"Al actualizar los permisos del rol 'Moderador', se añade la capacidad de 'ocultar_comentarios' insertando un nuevo registro aquí."

9. ARTICULO_CATEGORIA (Tabla intermedia)
📌 Propósito:
Gestiona la relación M:N entre artículos y categorías con metadatos adicionales.

🔍 Estructura clave:

es_principal: Categoría destacada (booleano)

orden: Prioridad de visualización

fecha_asociacion: Auditoría

🔗 Relaciones:

FK → ARTICULO + FK → CATEGORIA
Ejemplo: (articulo_id:33, categoria_id:8) = "Artículo en categoría Mobile"

🛠 Caso de uso práctico:
"Un artículo sobre 'React Native' está principalmente en 'Programación' (es_principal:true) y secundariamente en 'Mobile'."

10. ARTICULO_ETIQUETA (Tabla intermedia)
📌 Propósito:
Relaciona artículos con etiquetas incluyendo peso de relevancia.

🔍 Estructura clave:

relevancia: Peso (1.0=básico, 5.0=central)
Ejemplo: Un artículo sobre IA tiene relevancia 5 en "Machine Learning" y 2 en "Cloud"

fecha_asociacion: Para análisis temporales

🛠 Caso de uso práctico:
"Al editar un artículo, el autor ajusta la relevancia de la etiqueta 'Blockchain' de 3.0 a 4.5 porque amplió esa sección."

11. COMENTARIO
📌 Propósito:
Sistema de comentarios con moderación y capacidad de respuestas anidadas.

🔍 Estructura clave:

estado: Flujo de moderación ("pendiente", "aprobado")

parent_id: Hilos de discusión

contenido: Texto con sanitización

🔗 Relaciones:

Auto-relación: "Respuestas"
Ejemplo: El comentario ID:150 es respuesta al ID:142

N:1 → USUARIO: "Autor del comentario"

N:1 → ARTICULO: "Artículo comentado"

🛠 Caso de uso práctico:
"Un comentario ofensivo se marca como 'rechazado' y solo lo ven los moderadores. Sus respuestas también se ocultan automáticamente (CASCADE)."

12. ADJUNTO
📌 Propósito:
Gestiona archivos multimedia y documentos asociados a artículos.

🔍 Estructura clave:

tipo: Clasificación ("imagen", "video", "documento")

orden: Posición en galerías

descripcion: Texto alternativo para accesibilidad

🔗 Relaciones:

N:1 → ARTICULO: "Artículo principal"
Ejemplo: El adjunto ID:88 (infografía.jpg) pertenece al artículo ID:25

🛠 Caso de uso práctico:
"Un artículo sobre arquitectura incluye 3 imágenes (orden 1-3) y un PDF descargable (orden 4) como recursos adicionales."

13. VERSION_ARTICULO
📌 Propósito:
Mantiene un historial completo de todas las versiones de un artículo.

🔍 Estructura clave:

contenido: Snapshots completos del texto

motivo_cambio: Contexto ("Corrección", "Actualización")

fecha_version: Auditoría temporal

🔗 Relaciones:

N:1 → ARTICULO: "Artículo versionado"

N:1 → USUARIO: "Quién hizo el cambio"

🛠 Caso de uso práctico:
"Se revierte el artículo ID:30 a la versión 3 porque la 4 contenía errores técnicos. El campo 'motivo_cambio' muestra 'Rollback por imprecisiones'."

14. ARTICULO_RELACIONADO
📌 Propósito:
Establece relaciones semánticas entre artículos para recomendaciones.

🔍 Estructura clave:

tipo_relacion: Clasificación ("similar", "complementario", "serie")

orden: Para secuencias ordenadas

🔗 Relaciones:

FK → ARTICULO (origen y destino)
Ejemplo: (articulo_origen_id:10, articulo_destino_id:15) = "Parte 1 → Parte 2"

🛠 Caso de uso práctico:
"Al final del artículo 'Introducción a Python', se muestran automáticamente 3 artículos 'complementarios' sobre librerías populares."

15. METADATO_SEO
📌 Propósito:
Optimiza la visibilidad en buscadores mediante metadatos estratégicos.

🔍 Estructura clave:

meta_titulo: Título para SEO (≤60 caracteres)

palabras_clave: Términos clave separados por comas

og_image: Imagen para redes sociales

🔗 Relaciones:

1:1 → ARTICULO: Relación exclusiva
Ejemplo: El artículo ID:40 tiene metadatos SEO personalizados

🛠 Caso de uso práctico:
"El equipo de marketing edita los metadatos del artículo ID:56 para incluir palabras clave trending, aumentando un 30% el tráfico orgánico."

16. VOTO_ARTICULO
📌 Propósito:
Registra valoraciones de usuarios sobre artículos.

🔍 Estructura clave:

puntuacion: Rango (1-5 estrellas)

fecha: Para análisis temporales

🔗 Relaciones:

FK → USUARIO + FK → ARTICULO: "Quién votó qué"
Ejemplo: (usuario_id:9, articulo_id:12) = "5 estrellas"

🛠 Caso de uso práctico:
"El sistema calcula el rating promedio (4.2/5) del artículo ID:18 basado en 47 votos registrados."

17. HISTORIAL_LECTURA
📌 Propósito:
Trackea el comportamiento de lectura de los usuarios.

🔍 Estructura clave:

tiempo_lectura: Segundos reales de engagement

completado: Si llegó al final

🔗 Relaciones:

FK → USUARIO + FK → ARTICULO: "Qué leyó quién"
Ejemplo: (usuario_id:5, articulo_id:33) = "Leyó 4.5 minutos"

🛠 Caso de uso práctico:
"El sistema recomienda artículos similares a los que el usuario suele leer completamente (completado=true) por más de 3 minutos."

18. NEWSLETTER
📌 Propósito:
Gestiona suscripciones a boletines con preferencias personalizadas.

🔍 Estructura clave:

token_confirmacion: Para doble opt-in

preferencias: JSON con categorías/temas
Ejemplo: {"categorias": [2,7], "frecuencia": "semanal"}

🔗 Relaciones:

Implícita → CATEGORIA: A través del campo JSON

🛠 Caso de uso práctico:
"Cuando un usuario se suscribe seleccionando 'Tecnología' y 'Ciencia', el sistema envía boletines semanales con artículos de esas categorías."